version: "3.5"

networks:
  sawtooth-dev:
    name: sawtooth-dev

services:

  # the core process of a sawtooth network
  # it replicates blocks to peers and validates new blocks being submitted by clients
  validator:
    image: hyperledger/sawtooth-validator:1.0.5
    container_name: sawtooth-validator
    expose:
      - 4004
    ports:
      - "4004:4004"
    networks:
      - sawtooth-dev
    # start the validator with an empty genesis batch
    entrypoint: "bash -c \"\
        sawadm keygen && \
        sawtooth keygen my_key && \
        sawset genesis -k /root/.sawtooth/keys/my_key.priv && \
        sawadm genesis config-genesis.batch && \
        sawtooth-validator -vv \
          --endpoint tcp://validator:8800 \
          --bind component:tcp://eth0:4004 \
          --bind network:tcp://eth0:8800 \
        \""

  # a transaction processor responsible for the settings applied to the whole network of validators
  settings-tp:
    image: hyperledger/sawtooth-settings-tp:1.0.5
    container_name: sawtooth-settings-tp
    depends_on:
      - validator
    networks:
      - sawtooth-dev
    entrypoint: settings-tp -vv -C tcp://validator:4004

  # a transaction processor that provides functions that can be used to test deployed ledgers
  intkey-tp-go:
    image: hyperledger/sawtooth-intkey-tp-go:1.0.5
    container_name: sawtooth-intkey-tp-go
    depends_on:
      - validator
    networks:
      - sawtooth-dev
    entrypoint: intkey-tp-go -vv -C tcp://validator:4004

  # gives a REST interface to the validator so you can write programs that query state and submit new transactions
  rest-api:
    image: hyperledger/sawtooth-rest-api:1.0.5
    container_name: sawtooth-rest-api
    expose:
      - 8008
    networks:
      - sawtooth-dev
    ports:
      - "8008:8008"
    depends_on:
      - validator
    entrypoint: sawtooth-rest-api -C tcp://validator:4004 --bind rest-api:8008

  # a command line interface with various useful clients that can speak to the validator
  shell:
    image: hyperledger/sawtooth-shell:1.0.5
    container_name: sawtooth-shell
    depends_on:
      - rest-api
    networks:
      - sawtooth-dev
    entrypoint: "bash -c \"\
        sawtooth keygen --force && \
        tail -f /dev/null \
        \""
    # mount the key directory so we can use our keys in other containers
    volumes:
      - ./.keys:/root/.sawtooth/keys

  # a transaction processor for the XO demo
  # we are using local code for this so we can edit it
  xo-tp:
    build:
      context: ../xo
    container_name: sawtooth-xo-tp
    depends_on:
      - validator
    restart: always
    networks:
      - sawtooth-dev
    # mount the code for our tp into the container
    # this makes it easy to edit the code on our computer
    # without having to rebuild the container image each time
    # also mount the keys from the shell container so we can
    # read the keys for submitting transactions from the CLI
    volumes:
      - ../xo/src:/app/src
      - ./.keys:/root/.sawtooth/keys
    # loop forever so we can manually enter the container to run the tp
    # this is useful for development where we want to restart the tp
    # after having made code changes
    #entrypoint: tail -f /dev/null
    entrypoint: node src/tp/index.js --validator tcp://validator:4004

  # a utility container for the XO CLI exercise
  # we are using local code for this so we can edit it
  xo-tp-cli:
    build:
      context: ../xo
    container_name: sawtooth-xo-cli
    depends_on:
      - validator
    restart: always
    networks:
      - sawtooth-dev
    # mount the code for our tp into the container
    # this makes it easy to edit the code on our computer
    # without having to rebuild the container image each time
    # also mount the keys from the shell container so we can
    # read the keys for submitting transactions from the CLI
    volumes:
      - ../xo/src:/app/src
      - ./.keys:/root/.sawtooth/keys
    # loop forever so we can manually enter the container to run the tp
    # this is useful for development where we want to restart the tp
    # after having made code changes
    entrypoint: tail -f /dev/null

  # a web UI frontend for the xo tp
  # it will communicate to the TP via the sawtooth rest api
  xo-ui:
    image: blockchaintp/xo-demo:master
    container_name: sawtooth-xo-ui
    networks:
      - sawtooth-dev
    ports:
      - "8081:80"
    depends_on:
      - validator
    environment:
      - REST_API_HOSTNAME=rest-api
      - REST_API_PORT=8008

  # a transaction processor for the XO demo
  # we are using local code for this so we can edit it
  voting-tp:
    build:
      context: ../voting
    container_name: sawtooth-voting-tp
    depends_on:
      - validator
    restart: always
    networks:
      - sawtooth-dev
    # mount the code for our tp into the container
    # this makes it easy to edit the code on our computer
    # without having to rebuild the container image each time
    # also mount the keys from the shell container so we can
    # read the keys for submitting transactions from the CLI
    volumes:
      - ../voting/src:/app/src
      - ./.keys:/root/.sawtooth/keys
    # loop forever so we can manually enter the container to run the tp
    # this is useful for development where we want to restart the tp
    # after having made code changes
    #entrypoint: tail -f /dev/null
    entrypoint: node src/tp/index.js --validator tcp://validator:4004
